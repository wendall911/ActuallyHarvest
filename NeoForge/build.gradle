plugins {
    id 'multiloader-loader'
    id 'net.neoforged.gradle.userdev'
    id 'net.darkhax.curseforgegradle'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.8'
    id 'com.modrinth.minotaur'
}

archivesBaseName = "${mod_id}"
version = neoforge_mod_version

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
def at = file('src/main/resources/META-INF/accesstransformer.cfg')
if (at.exists()) {
    minecraft.accessTransformers.file at
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
}

subsystems {
    parchment {
        minecraftVersion = "${parchment_mc_version}"
        mappingsVersion = "${parchment_version}"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    implementation group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-neoforge', version: "${spectrelib_version}+${minecraft_version}"
    jarJar group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-neoforge', version: "${spectrelib_version}+${minecraft_version}"

    // Testing mods
    runtimeOnly "curse.maven:configured-457570:5180902"
    runtimeOnly "curse.maven:catalogue-459701:4766090"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-forge:${jei_version}"
    //runtimeOnly "curse.maven:farmers_delight-398521:${farmers_delight_forge_version}"
    //runtimeOnly "curse.maven:ephero_lib-885449:${ephero_lib_forge_version}"
    //runtimeOnly "curse.maven:croptopia-415438:${croptopia_forge_version}"
    //runtimeOnly "curse.maven:the_veggie_way-270684:${the_veggie_way_forge_version}"
    //runtimeOnly "curse.maven:phc_crops-361385:${phc_crops_forge_version}"
    //runtimeOnly "curse.maven:phc_trees-365460:${phc_trees_forge_version}"
    //runtimeOnly "curse.maven:kiwi-303657:${kiwi_forge_version}"
    //runtimeOnly "curse.maven:lychee-567403:${lychee_forge_version}"
    //runtimeOnly "curse.maven:fruittrees-355467:${fruit_trees_forge_version}"
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

tasks.jarJar.configure {
    archiveClassifier.set("")
}

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(project(":").projectDir.toString() + '/build/libs/changelog.txt');
    templateContent = file(project(":").projectDir.toString() + '/files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${minecraft_version}-${last_mod_version}";
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("../files/templates/") {
        include 'updates.json'
        expand 'version': version, 'minecraft_version': minecraft_version
    }

    it.into '../files/'
}

tasks.generateUpdates.mustRunAfter('jar', 'sourcesJar')

tasks.build.dependsOn('changelog', 'generateUpdates')

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    if (project.hasProperty('ahcurseApiKey')) {
        apiToken = project.ahcurseApiKey
        def mainFile = upload(project.ahcurseId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
        mainFile.changelog = file(changelogFile)
        mainFile.addJavaVersion("Java ${java_version}")
        mainFile.addModLoader('NeoForge')
        mainFile.releaseType = "${release_type}"
        "${release_versions}".split(',').each {
            mainFile.addGameVersion("${it}")
        }
        mainFile.addOptional('catalogue')
        mainFile.addOptional('farmers-delight')
        mainFile.addOptional('the-veggie-way')
        mainFile.addOptional('pams-harvestcraft-2-crops')
        mainFile.addOptional('pams-harvestcraft-2-trees')
        mainFile.addOptional('fruit-trees')
        mainFile.addOptional('croptopia')
    }
}

modrinth {
    if (project.hasProperty('ahModrinthId')) {
        token = project.modrinthKey
        projectId = project.ahModrinthId
        version = getVersion()
        versionType = "${release_type}"
        if (file(changelogFile).exists()) {
            changelog = file(changelogFile).text
        }
        uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
        gameVersions = "${release_versions}".split(",") as List<String>
        loaders = ['neoforge']
        dependencies {
            optional.project 'farmers-delight'
            optional.project 'fruitful-fun'
        }
    }
}
