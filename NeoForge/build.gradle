plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id 'io.github.goooler.shadow'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
}

archivesBaseName = "${mod_id}"
version = neoforge_mod_version

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':Common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_mc_version
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    implementation group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-neoforge', version: "${spectrelib_version}"
    jarJar group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-neoforge', version: "${spectrelib_version}"

    // Testing mods
    //runtimeOnly "curse.maven:configured-457570:5340194"
    //runtimeOnly "curse.maven:catalogue-459701:5303328"
    runtimeOnly "mezz.jei:jei-1.21-neoforge:${jei_version}"
    //runtimeOnly "curse.maven:farmers_delight-398521:${farmers_delight_forge_version}"
    //runtimeOnly "curse.maven:extra_delight-842106:5659546"
    //runtimeOnly "curse.maven:ephero_lib-885449:${ephero_lib_forge_version}"
    //runtimeOnly "curse.maven:croptopia-415438:${croptopia_forge_version}"
    //runtimeOnly "curse.maven:the_veggie_way-270684:${the_veggie_way_forge_version}"
    //runtimeOnly "curse.maven:phc_crops-361385:${phc_crops_forge_version}"
    //runtimeOnly "curse.maven:phc_trees-365460:${phc_trees_forge_version}"
    //runtimeOnly "curse.maven:kiwi-303657:${kiwi_forge_version}"
    //runtimeOnly "curse.maven:lychee-567403:${lychee_forge_version}"
    //runtimeOnly "curse.maven:fruittrees-355467:${fruit_trees_forge_version}"
}

shadowJar {
    archiveClassifier = ''
}

tasks.register('idePostSync') {}

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(project(":").projectDir.toString() + '/build/libs/changelog.txt');
    templateContent = file(project(":").projectDir.toString() + '/files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${minecraft_version}-${last_mod_version}";
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("../files/templates/") {
        include 'updates.json'
        expand 'version': version, 'minecraft_version': minecraft_version
    }

    it.into '../files/'
}

tasks.generateUpdates.mustRunAfter('jar', 'sourcesJar')

tasks.build.dependsOn('changelog', 'generateUpdates')

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    if (project.hasProperty('ahcurseApiKey')) {
        apiToken = project.ahcurseApiKey
        def mainFile = upload(project.ahcurseId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
        mainFile.changelog = file(changelogFile)
        mainFile.addJavaVersion("Java ${java_version}")
        mainFile.addModLoader('NeoForge')
        mainFile.releaseType = "${release_type}"
        "${release_versions}".split(',').each {
            mainFile.addGameVersion("${it}")
        }
        mainFile.addOptional('configured')
        mainFile.addOptional('catalogue')
        mainFile.addOptional('farmers-delight')
        mainFile.addOptional('the-veggie-way')
        mainFile.addOptional('pams-harvestcraft-2-crops')
        mainFile.addOptional('pams-harvestcraft-2-trees')
        mainFile.addOptional('fruit-trees')
        mainFile.addOptional('croptopia')
    }
}

modrinth {
    if (project.hasProperty('ahModrinthId')) {
        token = project.modrinthKey
        projectId = project.ahModrinthId
        version = getVersion()
        versionType = "${release_type}"
        if (file(changelogFile).exists()) {
            changelog = file(changelogFile).text
        }
        uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
        gameVersions = "${release_versions}".split(",") as List<String>
        loaders = ['neoforge']
        dependencies {
            optional.project 'farmers-delight'
            optional.project 'fruitful-fun'
        }
    }
}
